#ifndef _MANTLE_WSI_WIN_EXT_H
#define _MANTLE_WSI_WIN_EXT_H

#include "mantle.h"

#ifdef __cplusplus
extern "C" {
#endif



// constants (guessed based on DXGI) 
#define GR_MAX_DEVICE_NAME_LEN           32
#define GR_MAX_GAMMA_RAMP_CONTROL_POINTS 1025



// type aliases
typedef uint64_t GR_WSI_WIN_DISPLAY;



// forward declarations
typedef struct _GR_RGB_FLOAT                             GR_RGB_FLOAT;
typedef struct _GR_WSI_WIN_DISPLAY_MODE                  GR_WSI_WIN_DISPLAY_MODE;
typedef struct _GR_WSI_WIN_DISPLAY_PROPERTIES            GR_WSI_WIN_DISPLAY_PROPERTIES;
typedef struct _GR_WSI_WIN_EXTENDED_DISPLAY_PROPERTIES   GR_WSI_WIN_EXTENDED_DISPLAY_PROPERTIES;
typedef struct _GR_WSI_WIN_GAMMA_RAMP                    GR_WSI_WIN_GAMMA_RAMP;
typedef struct _GR_WSI_WIN_GAMMA_RAMP_CAPABILITIES       GR_WSI_WIN_GAMMA_RAMP_CAPABILITIES;
typedef struct _GR_WSI_WIN_PRESENT_INFO                  GR_WSI_WIN_PRESENT_INFO;
typedef struct _GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO;
typedef struct _GR_WSI_WIN_PRESENTABLE_IMAGE_PROPERTIES  GR_WSI_WIN_PRESENTABLE_IMAGE_PROPERTIES;
typedef struct _GR_WSI_WIN_QUEUE_PROPERTIES              GR_WSI_WIN_QUEUE_PROPERTIES;



// functions
MAGMA_FUNCTION(grWsiWinGetDisplays)(
	GR_DEVICE           device,
	GR_UINT            *pDisplayCount,
	GR_WSI_WIN_DISPLAY *pDisplayList
);
MAGMA_FUNCTION(grWsiWinGetDisplayModeList)(
	GR_WSI_WIN_DISPLAY       display,
	GR_UINT                 *pDisplayModeCount,
	GR_WSI_WIN_DISPLAY_MODE *pDisplayModeList
);
MAGMA_FUNCTION(grWsiWinTakeFullscreenOwnership)(
	GR_WSI_WIN_DISPLAY display,
	GR_IMAGE image
);
MAGMA_FUNCTION(grWsiWinReleaseFullscreenOwnership)(
	GR_WSI_WIN_DISPLAY display
);
MAGMA_FUNCTION(grWsiWinSetGammaRamp)(
	GR_WSI_WIN_DISPLAY           display,
	const GR_WSI_WIN_GAMMA_RAMP *pGammaRamp
);
MAGMA_FUNCTION(grWsiWinWaitForVerticalBlank)(
	GR_WSI_WIN_DISPLAY display
);
MAGMA_FUNCTION(grWsiWinGetScanLine)(
	GR_WSI_WIN_DISPLAY display,
	GR_INT            *pScanLine
);
MAGMA_FUNCTION(grWsiWinCreatePresentableImage)(
	GR_DEVICE                                       device,
	const GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO *pCreateInfo,
	GR_IMAGE                                       *pImage,
	GR_GPU_MEMORY                                  *pMem
);
MAGMA_FUNCTION(grWsiWinQueuePresent)(
	GR_QUEUE                       queue,
	const GR_WSI_WIN_PRESENT_INFO *pPresentInfo
);
MAGMA_FUNCTION(grWsiWinSetMaxQueuedFrames)(
	GR_DEVICE device,
	GR_UINT   maxFrames
);



// enumerations
typedef enum _GR_WSI_WIN_IMAGE_STATE {
	GR_WSI_WIN_IMAGE_STATE_PRESENT_WINDOWED = 0x00200000,
	GR_WSI_WIN_IMAGE_STATE_PRESENT_FULLSCREEN
} GR_WSI_WIN_IMAGE_STATE;

typedef enum _GR_WSI_WIN_INFO_TYPE {
	GR_WSI_WIN_INFO_TYPE_QUEUE_PROPERTIES = 0x00206800,
	GR_WSI_WIN_INFO_TYPE_DISPLAY_PROPERTIES,
	GR_WSI_WIN_INFO_TYPE_GAMMA_RAMP_CAPABILITIES,
	GR_WSI_WIN_INFO_TYPE_DISPLAY_FREESYNC_SUPPORT,
	GR_WSI_WIN_INFO_TYPE_PRESENTABLE_IMAGE_PROPERTIES,
	GR_WSI_WIN_INFO_TYPE_EXTENDED_DISPLAY_PROPERTIES
} GR_WSI_WIN_INFO_TYPE;

typedef enum _GR_WSI_WIN_PRESENT_MODE {
	GR_WSI_WIN_PRESENT_MODE_WINDOWED = 0x00200200,
	GR_WSI_WIN_PRESENT_MODE_FULLSCREEN
} GR_WSI_WIN_PRESENT_MODE;

typedef enum _GR_WSI_WIN_RETURN_CODE {
	GR_WSI_WIN_PRESENT_OCCLUDED,
	GR_WSI_WIN_ERROR_FULLSCREEN_UNAVAILABLE,
	GR_WSI_WIN_ERROR_DISPLAY_REMOVED,
	GR_WSI_WIN_ERROR_INCOMPATIBLE_DISPLAY_MODE,
	GR_WSI_WIN_ERROR_MULTI_DEVICE_PRESENT_FAILED,
	GR_WSI_WIN_ERROR_WINDOWED_PRESENT_UNAVAILABLE,
	GR_WSI_WIN_ERROR_INVALID_RESOLUTION
} GR_WSI_WIN_RETURN_CODE;

typedef enum _GR_WSI_WIN_ROTATION_ANGLE {
	GR_WSI_WIN_ROTATION_ANGLE_0 = 0x00200100,
	GR_WSI_WIN_ROTATION_ANGLE_90,
	GR_WSI_WIN_ROTATION_ANGLE_180,
	GR_WSI_WIN_ROTATION_ANGLE_270
} GR_WSI_WIN_ROTATION_ANGLE;



// flags
typedef enum _GR_WSI_WIN_EXTENDED_DISPLAY_FLAGS {
	GR_WSI_WIN_WINDOWED_VBLANK_WAIT  = 1 << 0,
	GR_WSI_WIN_WINDOWED_GET_SCANLINE = 1 << 1
} _GR_WSI_WIN_EXTENDED_DISPLAY_FLAGS;

typedef enum _GR_WSI_WIN_IMAGE_CREATE_FLAGS {
	GR_WSI_WIN_IMAGE_CREATE_FULLSCREEN_PRESENT = 1 << 0,
	GR_WSI_WIN_IMAGE_CREATE_STEREO             = 1 << 1
} GR_WSI_WIN_IMAGE_CREATE_FLAGS;

typedef enum _GR_WSI_WIN_PRESENT_FLAGS {
	GR_WSI_WIN_PRESENT_FULLSCREEN_DONOTWAIT = 1 << 0,
	GR_WSI_WIN_PRESENT_FULLSCREEN_STEREO    = 1 << 1
} GR_WSI_WIN_PRESENT_FLAGS;

typedef enum _GR_WSI_WIN_PRESENT_SUPPORT_FLAGS {
	GR_WSI_WIN_FULLSCREEN_PRESENT_SUPPORTED = 1 << 0,
	GR_WSI_WIN_WINDOWED_PRESENT_SUPPORTED   = 1 << 1
} GR_WSI_WIN_PRESENT_SUPPORT_FLAGS;



// structures
struct _GR_RGB_FLOAT {
	GR_FLOAT red;
	GR_FLOAT green;
	GR_FLOAT blue;
};

struct _GR_WSI_WIN_DISPLAY_MODE {
	GR_EXTENT2D extent;
	GR_FORMAT   format;
	GR_UINT     refreshRate;
	GR_BOOL     stereo;
	GR_BOOL     crossDisplayPresent;
};

struct _GR_WSI_WIN_DISPLAY_PROPERTIES {
	void *hMonitor;
	GR_CHAR displayName[GR_MAX_DEVICE_NAME_LEN];
	GR_RECT desktopCoordinates;
	GR_ENUM rotation;
};

struct _GR_WSI_WIN_EXTENDED_DISPLAY_PROPERTIES {
	GR_FLAGS extendedProperties;
};

struct _GR_WSI_WIN_GAMMA_RAMP {
	GR_RGB_FLOAT scale;
	GR_RGB_FLOAT offset;
	GR_RGB_FLOAT gammaCurve[GR_MAX_GAMMA_RAMP_CONTROL_POINTS];
};

struct _GR_WSI_WIN_GAMMA_RAMP_CAPABILITIES {
	GR_BOOL  supportsScaleAndOffset;
	GR_FLOAT minConvertedValue;
	GR_FLOAT maxConvertedValue;
	GR_UINT  controlPointCount;
	GR_FLOAT controlPointPositions[GR_MAX_GAMMA_RAMP_CONTROL_POINTS];
};

struct _GR_WSI_WIN_PRESENT_INFO {
	void    *hWndDest;
	GR_IMAGE srcImage;
	GR_ENUM  presentMode;
	GR_UINT  presentInterval;
	GR_FLAGS flags;
};

struct _GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO {
	GR_FORMAT          format;
	GR_FLAGS           usage;
	GR_EXTENT2D        extent;
	GR_WSI_WIN_DISPLAY display;
	GR_FLAGS           flags;
};



#ifdef __cplusplus
}
#endif

#endif
