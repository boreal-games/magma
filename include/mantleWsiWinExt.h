#ifndef _MANTLE_WSI_WIN_EXT_H
#define _MANTLE_WSI_WIN_EXT_H

#include "mantle.h"

#ifdef __cplusplus
extern "C" {
#endif



// constants (guessed based on DXGI) 
#define GR_MAX_DEVICE_NAME_LEN           32
#define GR_MAX_GAMMA_RAMP_CONTROL_POINTS 1025



// type aliases
MAGMA_HANDLE(GR_WSI_WIN_DISPLAY);



// forward declarations
MAGMA_ENUM(R_WSI_WIN_IMAGE_STATE);
MAGMA_ENUM(R_WSI_WIN_INFO_TYPE);
MAGMA_ENUM(R_WSI_WIN_PRESENT_MODE);
MAGMA_ENUM(R_WSI_WIN_RESULT);
MAGMA_ENUM(R_WSI_WIN_ROTATION_ANGLE);

MAGMA_ENUM(GR_WSI_WIN_EXTENDED_DISPLAY_FLAGS);
MAGMA_ENUM(GR_WSI_WIN_IMAGE_CREATE_FLAGS);
MAGMA_ENUM(GR_WSI_WIN_PRESENT_FLAGS);
MAGMA_ENUM(GR_WSI_WIN_PRESENT_SUPPORT_FLAGS);

MAGMA_STRUCT(GR_RGB_FLOAT);
MAGMA_STRUCT(GR_WSI_WIN_DISPLAY_MODE);
MAGMA_STRUCT(GR_WSI_WIN_DISPLAY_PROPERTIES);
MAGMA_STRUCT(GR_WSI_WIN_EXTENDED_DISPLAY_PROPERTIES);
MAGMA_STRUCT(GR_WSI_WIN_GAMMA_RAMP);
MAGMA_STRUCT(GR_WSI_WIN_GAMMA_RAMP_CAPABILITIES);
MAGMA_STRUCT(GR_WSI_WIN_PRESENT_INFO);
MAGMA_STRUCT(GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO);
MAGMA_STRUCT(GR_WSI_WIN_PRESENTABLE_IMAGE_PROPERTIES);
MAGMA_STRUCT(GR_WSI_WIN_QUEUE_PROPERTIES);



// functions
MAGMA_FUNCTION(GR_RESULT, grWsiWinGetDisplays)(
	GR_DEVICE           device,
	GR_UINT            *pDisplayCount,
	GR_WSI_WIN_DISPLAY *pDisplayList
);

MAGMA_FUNCTION(GR_RESULT, grWsiWinGetDisplayModeList)(
	GR_WSI_WIN_DISPLAY       display,
	GR_UINT                 *pDisplayModeCount,
	GR_WSI_WIN_DISPLAY_MODE *pDisplayModeList
);

MAGMA_FUNCTION(GR_RESULT, grWsiWinTakeFullscreenOwnership)(
	GR_WSI_WIN_DISPLAY display,
	GR_IMAGE image
);

MAGMA_FUNCTION(GR_RESULT, grWsiWinReleaseFullscreenOwnership)(
	GR_WSI_WIN_DISPLAY display
);

MAGMA_FUNCTION(GR_RESULT, grWsiWinSetGammaRamp)(
	GR_WSI_WIN_DISPLAY           display,
	const GR_WSI_WIN_GAMMA_RAMP *pGammaRamp
);

MAGMA_FUNCTION(GR_RESULT, grWsiWinWaitForVerticalBlank)(
	GR_WSI_WIN_DISPLAY display
);

MAGMA_FUNCTION(GR_RESULT, grWsiWinGetScanLine)(
	GR_WSI_WIN_DISPLAY display,
	GR_INT            *pScanLine
);

MAGMA_FUNCTION(GR_RESULT, grWsiWinCreatePresentableImage)(
	GR_DEVICE                                       device,
	const GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO *pCreateInfo,
	GR_IMAGE                                       *pImage,
	GR_GPU_MEMORY                                  *pMem
);

MAGMA_FUNCTION(GR_RESULT, grWsiWinQueuePresent)(
	GR_QUEUE                       queue,
	const GR_WSI_WIN_PRESENT_INFO *pPresentInfo
);

MAGMA_FUNCTION(GR_RESULT, grWsiWinSetMaxQueuedFrames)(
	GR_DEVICE device,
	GR_UINT   maxFrames
);



// enumerations
enum _GR_WSI_WIN_IMAGE_STATE {
	GR_WSI_WIN_IMAGE_STATE_PRESENT_WINDOWED = 0x00200000,
	GR_WSI_WIN_IMAGE_STATE_PRESENT_FULLSCREEN
};

enum _GR_WSI_WIN_INFO_TYPE {
	GR_WSI_WIN_INFO_TYPE_QUEUE_PROPERTIES = 0x00206800,
	GR_WSI_WIN_INFO_TYPE_DISPLAY_PROPERTIES,
	GR_WSI_WIN_INFO_TYPE_GAMMA_RAMP_CAPABILITIES,
	GR_WSI_WIN_INFO_TYPE_DISPLAY_FREESYNC_SUPPORT,
	GR_WSI_WIN_INFO_TYPE_PRESENTABLE_IMAGE_PROPERTIES,
	GR_WSI_WIN_INFO_TYPE_EXTENDED_DISPLAY_PROPERTIES
};

enum _GR_WSI_WIN_PRESENT_MODE {
	GR_WSI_WIN_PRESENT_MODE_WINDOWED = 0x00200200,
	GR_WSI_WIN_PRESENT_MODE_FULLSCREEN
};

enum _GR_WSI_WIN_RESULT {
	GR_WSI_WIN_PRESENT_OCCLUDED = 0x21000,
	GR_WSI_WIN_ERROR_FULLSCREEN_UNAVAILABLE,
	GR_WSI_WIN_ERROR_DISPLAY_REMOVED,
	GR_WSI_WIN_ERROR_INCOMPATIBLE_DISPLAY_MODE,
	GR_WSI_WIN_ERROR_MULTI_DEVICE_PRESENT_FAILED,
	GR_WSI_WIN_ERROR_WINDOWED_PRESENT_UNAVAILABLE,
	GR_WSI_WIN_ERROR_INVALID_RESOLUTION
};

enum _GR_WSI_WIN_ROTATION_ANGLE {
	GR_WSI_WIN_ROTATION_ANGLE_0 = 0x00200100,
	GR_WSI_WIN_ROTATION_ANGLE_90,
	GR_WSI_WIN_ROTATION_ANGLE_180,
	GR_WSI_WIN_ROTATION_ANGLE_270
};



// flags
enum _GR_WSI_WIN_EXTENDED_DISPLAY_FLAGS {
	GR_WSI_WIN_WINDOWED_VBLANK_WAIT  = 1 << 0,
	GR_WSI_WIN_WINDOWED_GET_SCANLINE = 1 << 1
};

enum _GR_WSI_WIN_IMAGE_CREATE_FLAGS {
	GR_WSI_WIN_IMAGE_CREATE_FULLSCREEN_PRESENT = 1 << 0,
	GR_WSI_WIN_IMAGE_CREATE_STEREO             = 1 << 1
};

enum _GR_WSI_WIN_PRESENT_FLAGS {
	GR_WSI_WIN_PRESENT_FULLSCREEN_DONOTWAIT = 1 << 0,
	GR_WSI_WIN_PRESENT_FULLSCREEN_STEREO    = 1 << 1
};

enum _GR_WSI_WIN_PRESENT_SUPPORT_FLAGS {
	GR_WSI_WIN_FULLSCREEN_PRESENT_SUPPORTED = 1 << 0,
	GR_WSI_WIN_WINDOWED_PRESENT_SUPPORTED   = 1 << 1
};



// primary structures
struct _GR_RGB_FLOAT {
	GR_FLOAT red;
	GR_FLOAT green;
	GR_FLOAT blue;
};

struct _GR_WSI_WIN_DISPLAY_MODE {
	GR_EXTENT2D extent;
	GR_FORMAT   format;
	GR_UINT     refreshRate;
	GR_BOOL     stereo;
	GR_BOOL     crossDisplayPresent;
};

struct _GR_WSI_WIN_DISPLAY_PROPERTIES {
	void   *hMonitor;
	GR_CHAR displayName[GR_MAX_DEVICE_NAME_LEN];
	GR_RECT desktopCoordinates;
	GR_ENUM rotation;
};

struct _GR_WSI_WIN_EXTENDED_DISPLAY_PROPERTIES {
	GR_FLAGS extendedProperties;
};

struct _GR_WSI_WIN_GAMMA_RAMP_CAPABILITIES {
	GR_BOOL  supportsScaleAndOffset;
	GR_FLOAT minConvertedValue;
	GR_FLOAT maxConvertedValue;
	GR_UINT  controlPointCount;
	GR_FLOAT controlPointPositions[GR_MAX_GAMMA_RAMP_CONTROL_POINTS];
};

struct _GR_WSI_WIN_PRESENT_INFO {
	void    *hWndDest;
	GR_IMAGE srcImage;
	GR_ENUM  presentMode;
	GR_UINT  presentInterval;
	GR_FLAGS flags;
};

struct _GR_WSI_WIN_PRESENTABLE_IMAGE_CREATE_INFO {
	GR_FORMAT          format;
	GR_FLAGS           usage;
	GR_EXTENT2D        extent;
	GR_WSI_WIN_DISPLAY display;
	GR_FLAGS           flags;
};



// secondary structures
struct _GR_WSI_WIN_GAMMA_RAMP {
	GR_RGB_FLOAT scale;
	GR_RGB_FLOAT offset;
	GR_RGB_FLOAT gammaCurve[GR_MAX_GAMMA_RAMP_CONTROL_POINTS];
};



#ifdef __cplusplus
}
#endif

#endif
